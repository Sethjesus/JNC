import time
import os
from datetime import datetime, timezone
from pymodbus.client.sync import ModbusSerialClient
from pymodbus.payload import BinaryPayloadDecoder
from pymodbus.constants import Endian
from influxdb_client import InfluxDBClient, Point, WritePrecision
import mysql.connector

# ‚úÖ InfluxDB Ë®≠ÂÆö
influx_token = "YYbHwHS2JDcYhun3He2OlloMGrm68OBtA0IhzwdhstJDptuUNwgTMd1aQ7Rc6Bppe4G9qDaGLPXHeWp0SDDN2A=="
influx_org = "Âè∞ÂåóÂ∏Ç"
influx_bucket = "air_quality"
influx_url = "https://us-east-1-1.aws.cloud2.influxdata.com"

influx_client = InfluxDBClient(url=influx_url, token=influx_token, org=influx_org)
write_api = influx_client.write_api()

# ‚úÖ MySQL Ë®≠ÂÆö
db_config = {
    "host": "localhost",
    "user": "root",
    "password": "S96910010a.",  # <<< Ë´ãÂ°´‰Ω†ÁöÑ MySQL ÂØÜÁ¢º
    "database": "env_data"
}

# ‚úÖ Git push ÂáΩÊï∏ÔºàÈÅøÂÖç rebase Ë°ùÁ™ÅÔºâ
def git_push(files_to_commit):
    try:
        for file in files_to_commit:
            os.system(f"git add {file}")
        result = os.system("git diff --cached --quiet")
        if result != 0:
            os.system(f'git commit -m "Ëá™ÂãïÊõ¥Êñ∞ {datetime.now()}"')
            os.system("git push origin HEAD:main")
            print("‚úÖ Git Êé®ÈÄÅÊàêÂäü")
        else:
            print("üîÅ Ê≤íÊúâËÆäÊõ¥Ôºå‰∏çÈúÄÊé®ÈÄÅ")
    except Exception as e:
        print(f"‚ùå Git Êé®ÈÄÅÂ§±Êïó: {e}")

# ‚úÖ Modbus RTU ÂÆ¢Êà∂Á´ØÂàùÂßãÂåñ
client = ModbusSerialClient(method='rtu', port='COM5', baudrate=9600, timeout=3)

# ‚úÖ ÊØè 30 ÁßíËÆÄÂèñ Modbus
while True:
    if not client.connect():
        print("‚ö†Ô∏è COM5 ÈÄ£Á∑öÂ§±ÊïóÔºå5 ÁßíÂæåÈáçË©¶...")
        time.sleep(5)
        continue

    try:
        result = client.read_input_registers(address=0x0084, count=4, unit=1)
        if result.isError():
            print(f"[{datetime.now()}] ‚ùå Modbus ËÆÄÂèñÂ§±Êïó")
            time.sleep(5)
            continue

        decoder = BinaryPayloadDecoder.fromRegisters(
            result.registers,
            byteorder=Endian.Big,
            wordorder=Endian.Little
        )
        co2 = round(decoder.decode_32bit_float(), 1)
        pm25 = round(decoder.decode_32bit_float(), 2)
        now = datetime.now(timezone.utc)

        print(f"[{datetime.now()}] ‚úÖ CO2={co2} ppm, PM2.5={pm25} Œºg/m¬≥")

        # ‚úÖ ÂØ´ÂÖ• InfluxDB
        point = (
            Point("env_data")
            .field("co2", co2)
            .field("pm25", pm25)
            .time(now, WritePrecision.NS)
        )
        write_api.write(bucket=influx_bucket, org=influx_org, record=point)

        # ‚úÖ ÂØ´ÂÖ• MySQL
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            sql = "INSERT INTO env_metrics (recorded_at, co2, pm25) VALUES (%s, %s, %s)"
            cursor.execute(sql, (now.strftime("%Y-%m-%d %H:%M:%S"), co2, pm25))
            conn.commit()
            cursor.close()
            conn.close()
            print("‚úÖ ÊàêÂäüÂØ´ÂÖ• MySQL")
        except Exception as e:
            print(f"‚ùå MySQL ÂØ´ÂÖ•Â§±ÊïóÔºö{e}")

        # ‚úÖ ÂØ´ÂÖ• log.txt ‰∏¶Êé®ÈÄÅ Git
        try:
            with open("log.txt", "a", encoding="utf-8") as log_file:
                log_file.write(f"{now.isoformat()} | CO2={co2} ppm | PM2.5={pm25} Œºg/m¬≥\n")
            git_push(["log.txt"])
        except Exception as e:
            print(f"‚ùå ÂØ´ÂÖ• log.txt Êàñ Git Êé®ÈÄÅÂ§±ÊïóÔºö{e}")

    except Exception as e:
        print(f"‚ùå Âü∑Ë°åÈÅéÁ®ãÈåØË™§Ôºö{e}")

    time.sleep(30)
